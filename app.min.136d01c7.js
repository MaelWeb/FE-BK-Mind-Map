"use strict";function _typeof(t){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}window.onload=function(){var e=document.getElementById("svg"),n=200;if(window.scroll({top:e.clientHeight/2-window.screen.availHeight/2,let:e.clientWidth/2-window.screen.availWidth/2,behavior:"smooth"}),document.body.style.zoom="reset",document.addEventListener("keydown",function(t){!0!==t.ctrlKey&&!0!==t.metaKey||61!==t.which&&107!==t.which&&173!==t.which&&109!==t.which&&187!==t.which&&189!==t.which||(t.preventDefault(),console.log(t.which),61===t.which||107===t.which||187===t.which?n+=10:n-=10,e.style.width=n+"%")},!1),!window.localStorage.getItem("clickLog")){var t=document.querySelector(".J-tips");t.style.display="block",t.addEventListener("click",function(){window.localStorage.setItem("clickLog",!0),t.style.display="none"})}},"serviceWorker"in navigator&&window.addEventListener("load",function(){navigator.serviceWorker.register("/sw.js").then(function(t){console.log("SW registered: ",t)}).catch(function(t){console.log("SW registration failed: ",t)})}),function(){var u,c,t,e,s,n,r,o,i,w,a,l,v,p,h,d,f,b,S,g,y,m,k,L,q,x,P,T,R,E,_,j,O,M,A,N,W,F,C,U,I,H,X,D,z,B,G,J,K=[].slice,Q={}.hasOwnProperty,V=function(t,e){for(var n in e)Q.call(e,n)&&(t[n]=e[n]);function r(){this.constructor=t}return r.prototype=e.prototype,t.prototype=new r,t.__super__=e.prototype,t},Y=[].indexOf||function(t){for(var e=0,n=this.length;e<n;e++)if(e in this&&this[e]===t)return e;return-1};for(y={catchupTime:100,initialRate:.03,minTime:250,ghostTime:100,maxProgressPerFrame:20,easeFactor:1.25,startOnPageLoad:!0,restartOnPushState:!0,restartOnRequestAfter:500,target:"body",elements:{checkInterval:100,selectors:["body"]},eventLag:{minSamples:10,sampleCount:3,lagThreshold:3},ajax:{trackMethods:["GET"],trackWebSockets:!0,ignoreURLs:[]}},R=function(){var t;return null!=(t="undefined"!=typeof performance&&null!==performance&&"function"==typeof performance.now?performance.now():void 0)?t:+new Date},_=window.requestAnimationFrame||window.mozRequestAnimationFrame||window.webkitRequestAnimationFrame||window.msRequestAnimationFrame,g=window.cancelAnimationFrame||window.mozCancelAnimationFrame,null==_&&(_=function(t){return setTimeout(t,50)},g=function(t){return clearTimeout(t)}),O=function(e){var n,r;return n=R(),(r=function(){var t;return 33<=(t=R()-n)?(n=R(),e(t,function(){return _(r)})):setTimeout(r,33-t)})()},j=function(){var t,e,n;return n=arguments[0],e=arguments[1],t=3<=arguments.length?K.call(arguments,2):[],"function"==typeof n[e]?n[e].apply(n,t):n[e]},m=function(){var t,e,n,r,o,s,i;for(e=arguments[0],s=0,i=(r=2<=arguments.length?K.call(arguments,1):[]).length;s<i;s++)if(n=r[s])for(t in n)Q.call(n,t)&&(o=n[t],null!=e[t]&&"object"===_typeof(e[t])&&null!=o&&"object"===_typeof(o)?m(e[t],o):e[t]=o);return e},f=function(t){var e,n,r,o,s;for(n=e=0,o=0,s=t.length;o<s;o++)r=t[o],n+=Math.abs(r),e++;return n/e},L=function(t,e){var n,r,o;if(null==t&&(t="options"),null==e&&(e=!0),o=document.querySelector("[data-pace-"+t+"]")){if(n=o.getAttribute("data-pace-"+t),!e)return n;try{return JSON.parse(n)}catch(t){return r=t,"undefined"!=typeof console&&null!==console?console.error("Error parsing inline pace options",r):void 0}}},r=function(){function t(){}return t.prototype.on=function(t,e,n,r){var o;return null==r&&(r=!1),null==this.bindings&&(this.bindings={}),null==(o=this.bindings)[t]&&(o[t]=[]),this.bindings[t].push({handler:e,ctx:n,once:r})},t.prototype.once=function(t,e,n){return this.on(t,e,n,!0)},t.prototype.off=function(t,e){var n,r,o;if(null!=(null!=(r=this.bindings)?r[t]:void 0)){if(null==e)return delete this.bindings[t];for(n=0,o=[];n<this.bindings[t].length;)this.bindings[t][n].handler===e?o.push(this.bindings[t].splice(n,1)):o.push(n++);return o}},t.prototype.trigger=function(){var t,e,n,r,o,s,i,a,u;if(n=arguments[0],t=2<=arguments.length?K.call(arguments,1):[],null!=(i=this.bindings)?i[n]:void 0){for(o=0,u=[];o<this.bindings[n].length;)r=(a=this.bindings[n][o]).handler,e=a.ctx,s=a.once,r.apply(null!=e?e:this,t),s?u.push(this.bindings[n].splice(o,1)):u.push(o++);return u}},t}(),w=window.Pace||{},window.Pace=w,m(w,r.prototype),E=w.options=m({},y,window.paceOptions,L()),X=0,z=(G=["ajax","document","eventLag","elements"]).length;X<z;X++)!0===E[W=G[X]]&&(E[W]=y[W]);i=function(t){function e(){return e.__super__.constructor.apply(this,arguments)}return V(e,t),e}(Error),c=function(){function t(){this.progress=0}return t.prototype.getElement=function(){var t;if(null==this.el){if(!(t=document.querySelector(E.target)))throw new i;this.el=document.createElement("div"),this.el.className="pace pace-active",document.body.className=document.body.className.replace(/pace-done/g,""),document.body.className+=" pace-running",this.el.innerHTML='<div class="pace-progress">\n  <div class="pace-progress-inner"></div>\n</div>\n<div class="pace-activity"></div>',null!=t.firstChild?t.insertBefore(this.el,t.firstChild):t.appendChild(this.el)}return this.el},t.prototype.finish=function(){var t;return(t=this.getElement()).className=t.className.replace("pace-active",""),t.className+=" pace-inactive",document.body.className=document.body.className.replace("pace-running",""),document.body.className+=" pace-done"},t.prototype.update=function(t){return this.progress=t,this.render()},t.prototype.destroy=function(){try{this.getElement().parentNode.removeChild(this.getElement())}catch(t){i=t}return this.el=void 0},t.prototype.render=function(){var t,e,n,r,o,s,i;if(null==document.querySelector(E.target))return!1;for(t=this.getElement(),r="translate3d("+this.progress+"%, 0, 0)",o=0,s=(i=["webkitTransform","msTransform","transform"]).length;o<s;o++)e=i[o],t.children[0].style[e]=r;return(!this.lastRenderedProgress||this.lastRenderedProgress|0!==this.progress|0)&&(t.children[0].setAttribute("data-progress-text",(0|this.progress)+"%"),100<=this.progress?n="99":(n=this.progress<10?"0":"",n+=0|this.progress),t.children[0].setAttribute("data-progress",""+n)),this.lastRenderedProgress=this.progress},t.prototype.done=function(){return 100<=this.progress},t}(),o=function(){function t(){this.bindings={}}return t.prototype.trigger=function(t,e){var n,r,o,s,i;if(null!=this.bindings[t]){for(i=[],r=0,o=(s=this.bindings[t]).length;r<o;r++)n=s[r],i.push(n.call(this,e));return i}},t.prototype.on=function(t,e){var n;return null==(n=this.bindings)[t]&&(n[t]=[]),this.bindings[t].push(e)},t}(),H=window.XMLHttpRequest,I=window.XDomainRequest,U=window.WebSocket,k=function(t,e){var n,r;for(n in r=[],e.prototype)try{null==t[n]&&"function"!=typeof e[n]?"function"==typeof Object.defineProperty?r.push(Object.defineProperty(t,n,{get:function(){return e.prototype[n]},configurable:!0,enumerable:!0})):r.push(t[n]=e.prototype[n]):r.push(void 0)}catch(t){t}return r},P=[],w.ignore=function(){var t,e,n;return e=arguments[0],t=2<=arguments.length?K.call(arguments,1):[],P.unshift("ignore"),n=e.apply(null,t),P.shift(),n},w.track=function(){var t,e,n;return e=arguments[0],t=2<=arguments.length?K.call(arguments,1):[],P.unshift("track"),n=e.apply(null,t),P.shift(),n},N=function(t){var e;if(null==t&&(t="GET"),"track"===P[0])return"force";if(!P.length&&E.ajax){if("socket"===t&&E.ajax.trackWebSockets)return!0;if(e=t.toUpperCase(),0<=Y.call(E.ajax.trackMethods,e))return!0}return!1},a=function(t){function e(){var n,s=this;e.__super__.constructor.apply(this,arguments),n=function(r){var o;return o=r.open,r.open=function(t,e,n){return N(t)&&s.trigger("request",{type:t,url:e,request:r}),o.apply(r,arguments)}},window.XMLHttpRequest=function(t){var e;return e=new H(t),n(e),e};try{k(window.XMLHttpRequest,H)}catch(t){}if(null!=I){window.XDomainRequest=function(){var t;return t=new I,n(t),t};try{k(window.XDomainRequest,I)}catch(t){}}if(null!=U&&E.ajax.trackWebSockets){window.WebSocket=function(t,e){var n;return n=null!=e?new U(t,e):new U(t),N("socket")&&s.trigger("request",{type:"socket",url:t,protocols:e,request:n}),n};try{k(window.WebSocket,U)}catch(t){}}}return V(e,o),e}(),D=null,A=function(t){var e,n,r,o;for(n=0,r=(o=E.ajax.ignoreURLs).length;n<r;n++)if("string"==typeof(e=o[n])){if(-1!==t.indexOf(e))return!0}else if(e.test(t))return!0;return!1},(q=function(){return null==D&&(D=new a),D})().on("request",function(t){var e,s,i,a,n;if(a=t.type,i=t.request,n=t.url,!A(n))return w.running||!1===E.restartOnRequestAfter&&"force"!==N(a)?void 0:(s=arguments,"boolean"==typeof(e=E.restartOnRequestAfter||0)&&(e=0),setTimeout(function(){var t,e,n,r,o;if("socket"===a?i.readyState<2:0<(n=i.readyState)&&n<4){for(w.restart(),o=[],t=0,e=(r=w.sources).length;t<e;t++){if((W=r[t])instanceof u){W.watch.apply(W,s);break}o.push(void 0)}return o}},e))}),u=function(){function t(){var t=this;this.elements=[],q().on("request",function(){return t.watch.apply(t,arguments)})}return t.prototype.watch=function(t){var e,n,r,o;if(r=t.type,e=t.request,o=t.url,!A(o))return n="socket"===r?new p(e):new h(e),this.elements.push(n)},t}(),h=function(e){var t,n,r,o,s,i=this;if(this.progress=0,null!=window.ProgressEvent)for(e.addEventListener("progress",function(t){return t.lengthComputable?i.progress=100*t.loaded/t.total:i.progress=i.progress+(100-i.progress)/2},!1),n=0,r=(s=["load","abort","timeout","error"]).length;n<r;n++)t=s[n],e.addEventListener(t,function(){return i.progress=100},!1);else o=e.onreadystatechange,e.onreadystatechange=function(){var t;return 0===(t=e.readyState)||4===t?i.progress=100:3===e.readyState&&(i.progress=50),"function"==typeof o?o.apply(null,arguments):void 0}},p=function(t){var e,n,r,o,s=this;for(n=this.progress=0,r=(o=["error","open"]).length;n<r;n++)e=o[n],t.addEventListener(e,function(){return s.progress=100},!1)},e=function(t){var e,n,r,o;for(null==t&&(t={}),this.elements=[],null==t.selectors&&(t.selectors=[]),n=0,r=(o=t.selectors).length;n<r;n++)e=o[n],this.elements.push(new s(e))},s=function(){function t(t){this.selector=t,this.progress=0,this.check()}return t.prototype.check=function(){var t=this;return document.querySelector(this.selector)?this.done():setTimeout(function(){return t.check()},E.elements.checkInterval)},t.prototype.done=function(){return this.progress=100},t}(),t=function(){function t(){var t,e,n=this;this.progress=null!=(e=this.states[document.readyState])?e:100,t=document.onreadystatechange,document.onreadystatechange=function(){return null!=n.states[document.readyState]&&(n.progress=n.states[document.readyState]),"function"==typeof t?t.apply(null,arguments):void 0}}return t.prototype.states={loading:0,interactive:50,complete:100},t}(),n=function(){var e,n,r,o,s,i=this;this.progress=0,s=[],o=e=0,r=R(),n=setInterval(function(){var t;return t=R()-r-50,r=R(),s.push(t),s.length>E.eventLag.sampleCount&&s.shift(),e=f(s),++o>=E.eventLag.minSamples&&e<E.eventLag.lagThreshold?(i.progress=100,clearInterval(n)):i.progress=3/(e+3)*100},50)},v=function(){function t(t){this.source=t,this.last=this.sinceLastUpdate=0,this.rate=E.initialRate,this.catchup=0,this.progress=this.lastProgress=0,null!=this.source&&(this.progress=j(this.source,"progress"))}return t.prototype.tick=function(t,e){var n;return null==e&&(e=j(this.source,"progress")),100<=e&&(this.done=!0),e===this.last?this.sinceLastUpdate+=t:(this.sinceLastUpdate&&(this.rate=(e-this.last)/this.sinceLastUpdate),this.catchup=(e-this.progress)/E.catchupTime,this.sinceLastUpdate=0,this.last=e),e>this.progress&&(this.progress+=this.catchup*t),n=1-Math.pow(this.progress/100,E.easeFactor),this.progress+=n*this.rate*t,this.progress=Math.min(this.lastProgress+E.maxProgressPerFrame,this.progress),this.progress=Math.max(0,this.progress),this.progress=Math.min(100,this.progress),this.lastProgress=this.progress,this.progress},t}(),S=d=C=b=M=F=null,w.running=!1,x=function(){if(E.restartOnPushState)return w.restart()},null!=window.history.pushState&&(B=window.history.pushState,window.history.pushState=function(){return x(),B.apply(window.history,arguments)}),null!=window.history.replaceState&&(J=window.history.replaceState,window.history.replaceState=function(){return x(),J.apply(window.history,arguments)}),l={ajax:u,elements:e,document:t,eventLag:n},(T=function(){var t,e,n,r,o,s,i,a;for(w.sources=F=[],e=0,r=(s=["ajax","elements","document","eventLag"]).length;e<r;e++)!1!==E[t=s[e]]&&F.push(new l[t](E[t]));for(n=0,o=(a=null!=(i=E.extraSources)?i:[]).length;n<o;n++)W=a[n],F.push(new W(E));return w.bar=b=new c,M=[],C=new v})(),w.stop=function(){return w.trigger("stop"),w.running=!1,b.destroy(),S=!0,null!=d&&("function"==typeof g&&g(d),d=null),T()},w.restart=function(){return w.trigger("restart"),w.stop(),w.start()},w.go=function(){var m;return w.running=!0,b.render(),m=R(),S=!1,d=O(function(t,e){var n,r,o,s,i,a,u,c,l,p,h,d,f,g,y;for(100-b.progress,r=p=0,o=!0,a=h=0,f=F.length;h<f;a=++h)for(W=F[a],l=null!=M[a]?M[a]:M[a]=[],u=d=0,g=(i=null!=(y=W.elements)?y:[W]).length;d<g;u=++d)s=i[u],o&=(c=null!=l[u]?l[u]:l[u]=new v(s)).done,c.done||(r++,p+=c.tick(t));return n=p/r,b.update(C.tick(t,n)),b.done()||o||S?(b.update(100),w.trigger("done"),setTimeout(function(){return b.finish(),w.running=!1,w.trigger("hide")},Math.max(E.ghostTime,Math.max(E.minTime-(R()-m),0)))):e()})},w.start=function(t){m(E,t),w.running=!0;try{b.render()}catch(t){i=t}return document.querySelector(".pace")?(w.trigger("start"),w.go()):setTimeout(w.start,50)},"function"==typeof define&&define.amd?define(["pace"],function(){return w}):"object"===("undefined"==typeof exports?"undefined":_typeof(exports))?module.exports=w:E.startOnPageLoad&&w.start()}.call(void 0);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,